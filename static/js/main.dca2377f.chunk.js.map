{"version":3,"sources":["components/TodoListTemplate.js","components/TodoItem.js","components/TodoItemList.js","components/Form.js","App.js","include/jquery.js","include/tether.js","include/popper.js","index.js"],"names":["TodoListTemplate","form","children","className","TodoItem","nextProps","nextState","this","props","checked","text","id","onToggle","onRemove","console","log","onClick","e","stopPropagation","Component","TodoItemList","todos","todoList","map","key","From","value","onChange","onCreate","onKeyPress","App","state","input","handleToggle","index","findIndex","todo","selected","nextTodos","setState","handleRemove","filter","handleChange","target","handleCreate","concat","check","handleKeyPredss","React","window","jQuery","$","Tether","Popper","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dca2377f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\n/*\r\nfunction TodoList() {\r\n    return <div>test</div>;\r\n}\r\n*/\r\n\r\nconst TodoListTemplate = ({form, children}) => {\r\n  return (\r\n    <main className=\"todo-list-template\">\r\n      <div className=\"title\">\r\n        오늘 할 일\r\n      </div>\r\n      <section className=\"form-wrapper\">\r\n        {form} \r\n      </section>\r\n      <section className=\"todos-wrapper\">\r\n        {children} \r\n      </section>\r\n    </main>\r\n    )\r\n}\r\n\r\nexport default TodoListTemplate;\r\n\r\n","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    render() {\r\n        const { text, checked, id, onToggle, onRemove } = this.props;\r\n\r\n        console.log(id);\r\n\r\n        return (\r\n            <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    e.stopPropagation();    // onToggle이 실행되지 않도록 함\r\n                    onRemove(id) \r\n                }}>&times;</div>\r\n                <div className={`todo-text ${checked && 'checked'}`}>\r\n                    <div>{text}</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">✓</div>)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoItemList extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n    render() {\r\n        /*\r\n            todos: todo 객체들이 들어있는 배열\r\n            onToggle: 체크박스를 키고 끄는 함수\r\n            onRemove: 아이템을 삭제시키는 함수\r\n        */\r\n        const { todos, onToggle, onRemove } = this.props;\r\n\r\n        \r\n        const todoList = todos.map(\r\n            ({id, text, checked}) => (\r\n                <TodoItem \r\n                    id={id}\r\n                    text={text}\r\n                    checked={checked}\r\n                    onToggle={onToggle}\r\n                    onRemove={onRemove}\r\n                    key={id}\r\n                />\r\n            )\r\n        );\r\n        \r\n        /*\r\n        const todoList = todos.map(\r\n            (todo) => (\r\n                <TodoItem \r\n                    {...todo}                   //내부의 값들이 모두 자동으로 props로 설정이 됨\r\n                    onToggle={onToggle}\r\n                    onRemove={onRemove}\r\n                    key={todo.id}\r\n                />\r\n            )\r\n        );\r\n        */\r\n\r\n        return (\r\n            <div>\r\n                {todoList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItemList;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst From = ({value, onChange, onCreate, onKeyPress}) => {\r\n    return (\r\n        <div className=\"form\">\r\n            <input value={value} onChange={onChange} onKeyPress={onKeyPress}/>\r\n            <div className=\"create-button\" onClick={onCreate}>\r\n                추가\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default From; ","import React from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport TodoItemList from './components/TodoItemList';\nimport Form from './components/Form';\nimport './app.css';\n\n/*\nfunction App() {\n  return (\n    <div>\n      {/*<Header />\n      <Sidebar />\n      <TodoListTemplate form={<Form/>}> \n        <TodoItemList/>\n      </TodoListTemplate>\n    </div>\n  );\n}\n*/\nclass App extends React.Component {\n  id = 3;\n\n  state = {\n    input: '',\n    todos: [\n      {id: 0, text: ' 리액트 소개', checked: false},\n      {id: 1, text: ' 리액트 소개', checked: true},\n      {id: 2, text: ' 리액트 소개', checked: false}\n    ]\n  }\n\n  handleToggle = (id) => {\n    //현재 state가 가지고 있는 정보중 todos를 가지고온다.\n    const { todos } = this.state;\n\n    //파라미터로 받은 id 를 가지고 몇번째 아이템인지 찾습니다.\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index];  //선택한 객체을 반환해서 selected 변수에 집어넣는다.\n    \n    const nextTodos = [...todos];  //현재 todos의배열을 복사하여 nextTodos변수에 넣는다 즉 nextTods는 clone Array가 된다.\n    \n    /*\n      기존의 todos에서 클릭한 element 객체에 들어있는 todos를 복사하고, \n      그 todos의 checked 를 역으로 덮어씌운다 --> 역으로 덮어씌운다는것은 무엇인가?\n      만약 true 라면 false 로 false라면 true\n      if true --> false || if false --> true\n    */\n    \n    console.log(todos);\n\n    nextTodos[index] = {\n      ...selected,\n      checked: !selected.checked\n    };\n    \n    this.setState({\n      todos: nextTodos\n    });\n  }\n\n  handleRemove = (id) => {\n    const {todos} = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n  \n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value   //input의 다음 바뀔 값\n    });\n  }\n  \n  handleCreate = () => {\n    const { input, todos } = this.state;\n    this.setState({\n      input: '',  //인풋 비우고\n      //concat 을 사용하여 배열에 추가\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        check: false\n      })\n    });\n  }\n\n  handleKeyPredss = (e) => {\n    //눌려진 키가 Enter 이라면 handleCreate 호출\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  render() {\n    const { input } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPredss,\n      handleToggle,\n      handleRemove\n    } = this;\n\n    return (\n      <TodoListTemplate form = {(\n        <Form \n          value={input}\n          onKeyPress={handleKeyPredss}\n          onChange={handleChange}\n          onCreate={handleCreate}\n        />\n      )}>\n        <TodoItemList todos={this.state.todos} onToggle={handleToggle} onRemove={handleRemove}/>\n      </TodoListTemplate>\n    );\n  }\n}\nexport default App;\n","import * as $ from 'jquery';\r\n\r\nwindow.jQuery = window.$ = $;","import Tether from 'tether'\r\n\r\nwindow.Tether = Tether","import Popper from 'popper.js'\r\n\r\nwindow.Popper = Popper","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './include/bootstrap'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}